datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  initiated
  pending
  processed
  shipped
  outForDelivery
  delivered
  returned
  canceled
}

enum PaymentStatus {
  pending
  failed
  received
}

enum ReturnStatus {
  none
  requested
  rejected
  returned
}

type Date {
  day   Int
  month Int
  year  Int
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid()) @map("_id")
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  phoneNumber           String?
  gender                String?
  dateOfBirth           Date?
  isActive              Boolean?
  premiumMember         Boolean?
  registrationDate      DateTime?
  passwordResetToken    String?
  verificationToken     String?
  address               String?
  profilePicture        String?
  isBlocked             Boolean?
  role                  UserRole               @default(USER)
  accounts              Account[]
  orders                Order[]
  favourite             Favourite[]
  cart                  Cart[]
  RatingsReviews        RatingsReviews[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid()) @map("_id")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  image               String
  productName         String
  price               Float
  category            String
  description         String
  stocks              Int
  sellerId            String?
  offer               Float
  isAssured           Boolean
  isActive            Boolean
  otherSpecifications Json
  orders              Order[]
  cart                Cart[]
  Favourite           Favourite[]
  RatingsReviews      RatingsReviews[]
}

model RatingsReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  rating    Int
  text      String
  isValid   Boolean
  date      DateTime
}

model Favourite {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
}

model Cart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
}

model Order {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentId          String
  user               User          @relation(fields: [userId], references: [id])
  userId             String
  address            String
  product            Product       @relation(fields: [productId], references: [id])
  productId          String        @db.ObjectId
  quantity           Int
  amount             Float
  status             Status
  paymentStatus      PaymentStatus
  shipmentTrackingId String
  orderDate          DateTime
  cancelationRequest Boolean
  returnStatus       ReturnStatus
}
